
:lang: en
:encoding: iso-8859-1
\Sexpr{options(prompt=" ", continue=" ")}
\SweaveOpts{prefix.string=figs/02}

=== Body size distribution of the New World Wrens ===
==== SQLITE vs. R MAPPING. 

TIP: This script runs with
<<results=ascii, echo=false>>= 
sexpr(paste(version$version.string, "&", "rangeMapper", packageDescription("rangeMapper")$Version) )
@


NOTE: The ``FUN'' in +rangeMap.save()+ is either a 'string' corresponding to an SQL ``aggregate function'' or 
an R function. 
+global.bbox.save()+ gets a p4s argument and the ranges are re-projected to equal area before 
processing. +

<<results=hide>>=
require(rangeMapper)
dbcon = rangeMap.start(file = "wrens.sqlite",dir = tempdir() , overwrite = TRUE)

# Breeding range vector files
f = system.file(package = "rangeMapper", "extdata", "wrens", "vector_combined")

# Creating a global bbox using the  breeding range vector files; re-project to equal area
projString =  CRS(" +proj=cea +lon_0=0 +lat_ts=30 +x_0=0+y_0=0 +ellps=WGS84 +units=km +no_defs")
global.bbox.save(con = dbcon, bbox = f, p4s = projString) 

# upload grid size to 100 sqkm
gridSize.save(dbcon, gridSize = 100) 

#  save canvas 
canvas.save(dbcon) 
@

.#Import taxa and life history data
<<results=hide, echo=true>>=
data(wrens)
head(wrens[, 3:6])
@
<<results=ascii, echo=false>>=
ascii(head(wrens[, 3:6]), include.rownames = FALSE, width = 60)
@

<<results=hide, echo=true>>=
bio.save(con = dbcon, loc = wrens ,  ID = "sci_name")
@

<<results=hide>>=
# Process ranges
 r = readOGR(f, "wrens", verbose = FALSE)
 processRanges(spdf = r, con =  dbcon, ID = "sci_name")
@

.# Mapping using SQL aggregate functions

<<results=hide>>=
rangeMap.save(dbcon, biotab = "wrens",FUN = "median", biotrait = "body_size", 
	tableName = "median_body_size")
@
	
.# Mapping using R functions

<<results=hide>>=
custom_function = function(x, ...) (sd(x, ...))
rangeMap.save(dbcon, biotab = "wrens", FUN = custom_function, biotrait = "body_size", 
	tableName = "sd_body_size", overwrite = TRUE)
@

<<results=hide,fig=true>>=
# Fetch and plot map
sr = rangeMap.fetch(dbcon)
plot(sr)
@



<<results=ascii, echo=false>>=
s = paste("_Website built with ", version$version.string, 
		" and the package ", dQuote(packageDescription("ascii")$Package), " version ", packageDescription("ascii")$Version, "_", sep = "")
 
ascii(s, style = 'm', grid = 'none',width = 0,frame = "none")
@















